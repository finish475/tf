/*

Time updateÔºö2024.03.19 11:25
UpdateÔºöT·ªëi ∆∞u script, s·ª≠a l·ªói, s·ª≠a c∆° ch·∫ø g·ª° b·ªè APP_ID kh√¥ng h·ª£p l·ªá (ch·ªâ g·ª° b·ªè khi link saiÔºâ

Surge conf
https://raw.githubusercontent.com/githubdulong/Script/master/Surge/autotf.sgmodule
Boxjs Register
https://raw.githubusercontent.com/githubdulong/Script/master/boxjs.json

*/

if (typeof $request !== 'undefined' && $request) {
    let url = $request.url;

    if (/^https:\/\/testflight\.apple\.com\/v3\/accounts\/.*\/apps$/.test(url)) {
        let headers = Object.fromEntries(Object.entries($request.headers).map(([key, value]) => [key.toLowerCase(), value]));
        let session_id = headers['x-session-id'];
        let session_digest = headers['x-session-digest'];
        let request_id = headers['x-request-id'];

        $persistentStore.write(session_id, 'session_id');
        $persistentStore.write(session_digest, 'session_digest');
        $persistentStore.write(request_id, 'request_id');

        $notification.post('Th√¥ng tin thu ƒë∆∞·ª£c th√†nh c√¥ng', 'Vui l√≤ng l·∫•y APP_ID Sau khi ch·ªânh s·ª≠a c√°c tham s·ªë, t·∫Øt t·∫≠p l·ªánh', '');
        console.log(`Th√¥ng tin thu ƒë∆∞·ª£c th√†nh c√¥ng: session_id=${session_id}, session_digest=${session_digest}, request_id=${request_id}`);
    } else if (/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/.test(url)) {
        const appIdMatch = url.match(/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/);
        if (appIdMatch && appIdMatch[1]) {
            let appId = appIdMatch[1];
            let existingAppIds = $persistentStore.read('APP_ID');
            let appIdSet = new Set(existingAppIds ? existingAppIds.split(',') : []);
            if (!appIdSet.has(appId)) {
                appIdSet.add(appId);
                $persistentStore.write(Array.from(appIdSet).join(','), 'APP_ID');
                $notification.post('ƒê√£ ch·ª•p APP_ID', '', `Ch·ª•p v√† l∆∞u tr·ªØ APP_ID: ${appId}`);
                console.log(`L·∫•y v√† l∆∞u tr·ªØ APP_ID: ${appId}`);
            } else {
                $notification.post('APP_ID L·∫∑p l·∫°i', '', `APP_ID: ${appId} ƒê√£ t·ªìn t·∫°i r·ªìi, kh√¥ng c·∫ßn th√™m l·∫°i.`);
                console.log(`APP_ID: ${appId} N√≥ ƒë√£ t·ªìn t·∫°i r·ªìi, kh√¥ng c·∫ßn th√™m l·∫°i.`);
            }
        } else {
            console.log('Kh√¥ng c√≥ c√°i n√†o h·ª£p l·ªá ƒë∆∞·ª£c ch·ª•p TestFlight APP_ID');
        }
    }

    $done({});
} else {
    !(async () => {
        let ids = $persistentStore.read('APP_ID');
        if (!ids) {
            console.log('Kh√¥ng ph√°t hi·ªán APP_ID');
            $done();
        } else {
            ids = ids.split(',');
            for await (const ID of ids) {
                await autoPost(ID, ids);
            }
            if (ids.length === 0) {
                $notification.post('T·∫•t c·∫£ TestFlight ƒë√£ ƒë∆∞·ª£c th√™m üéâ', 'M√¥-ƒëun n√†y ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông ƒë√≥ng', '');
                $done($httpAPI('POST', '/v1/modules', {'Gi√°m s√°t Beta Puplic': false}));
            } else {
                $done();
            }
        }
    })();
}

async function autoPost(ID, ids) {
    let Key = $persistentStore.read('key');
    let testUrl = https://testflight.apple.com/v3/accounts/${Key}/ru/apps$;
    let header = {
        'X-Session-Id': $persistentStore.read('session_id'),
        'X-Session-Digest': $persistentStore.read('session_digest'),
        'X-Request-Id': $persistentStore.read('request_id')
    };

    return new Promise(resolve => {
        $httpClient.get({url: testurl + ID, headers: header}, (error, response, data) => {
            if (error) {
                console.log(`${ID} Y√™u c·∫ßu m·∫°ng kh√¥ng th√†nh c√¥ng: ${error}ÔºåL∆∞u tr·ªØ APP_ID`);
                resolve();
                return;
            }

            if (response.status !== 200) {
                console.log(`${ID} Kh√¥ng ph·∫£i l√† m·ªôt li√™n k·∫øt h·ª£p l·ªá: M√£ tr·∫°ng th√°i ${response.status}ÔºåXo√° APP_ID`);
                ids.splice(ids.indexOf(ID), 1);
                $persistentStore.write(ids.join(','), 'APP_ID');
                $notification.post('Kh√¥ng ph·∫£i l√† li√™n k·∫øt TestFlight h·ª£p l·ªá', '', `${ID} ƒê√£ xo√°`);
                resolve();
                return;
            }

            let jsonData;
            try {
                jsonData = JSON.parse(data);
            } catch (parseError) {
                console.log(`${ID} Ph√¢n t√≠ch ph·∫£n h·ªìi kh√¥ng th√†nh c√¥ng: ${parseError}ÔºåL∆∞u tr·ªØ APP_ID`);
                resolve();
                return;
            }

            if (!jsonData || !jsonData.data) {
                console.log(`${ID} Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n l·ªùi m·ªùiÔºåL∆∞u tr·ªØ APP_ID`);
                resolve();
                return;
            }

            if (jsonData.data.status === 'FULL') {
                console.log(`${ID} B·∫£n Beta n√†y ƒë√£ ƒë·∫ßyÔºåL∆∞u tr·ªØ APP_ID`);
                resolve();
                return;
            }

            $httpClient.post({url: testurl + ID + '/accept', headers: header}, (error, response, body) => {
                if (!error && response.status === 200) {
                    let jsonBody;
                    try {
                        jsonBody = JSON.parse(body);
                    } catch (parseError) {
                        console.log(`${ID} Ph√¢n t√≠ch ph·∫£n h·ªìi y√™u c·∫ßu tham gia kh√¥ng th√†nh c√¥ng: ${parseError}ÔºåL∆∞u tr·ªØ APP_ID`);
                        resolve();
                        return;
                    }

                    console.log(`${jsonBody.data.name} ƒê√£ tham gia TestFlight th√†nh c√¥ng`);
                    ids.splice(ids.indexOf(ID), 1);
                    $persistentStore.write(ids.join(','), 'APP_ID');
                    if (ids.length > 0) {
                        $notification.post(jsonBody.data.name + ' ƒê√£ tham gia TestFlight th√†nh c√¥ng', '', `Ti·∫øp t·ª•c th·ª±c hi·ªán APP IDÔºö${ids.join(',')}`);
                    } else {
                        $notification.post(jsonBody.data.name + ' ƒê√£ tham gia TestFlight th√†nh c√¥ng', '', 'T·∫•t c·∫£ APP ID ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω');
                    }
                } else {
                    console.log(`${ID} Kh√¥ng th·ªÉ tham gia: ${error || `M√£ tr·∫°ng th√°i ${response.status}`}ÔºåL∆∞u tr·ªØ APP_ID`);
                }
                resolve();
            });
        });
    });
}
